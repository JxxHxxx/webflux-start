스레드의 개념 이해
Reactor에서 사용되는 Scheduler는 Reactor Sequence에서 사용되는 스레드를 관리해 주는 관리자 역할을 합니다.
따라서 Reactor의 Scheduler에 대한 이야기를 하기 전에 스레드에 대해서 먼저 간단히 살펴보겠습니다.

컴퓨터 시스템에서 스레드는 크게 물리적 스레드/논리적 스레드로 구분한다.

# 물리적 스레드
CPU의 코어
코어란 CPU의 명령어를 처리하는 반도체 유닛(단위)이다.

물리적인 스레드 = 논리적인 코어

# 물리적인 스레드의 관계 '듀얼코어 4 스레드'
CPU 안에 여러개의 core 그 안에 여러개의 스레드

# 논리적인 스레드
논리적인 스레드는 소프트웨어적으로 생성되는 스레드를 의미하며, Java 프로그래밍에서 사용되는 스레드는 바로 이러한 논리적인 스레드라고 볼 수 있습니다.
논리적인 스레드는 우리가 흔히들 프로그램이라고 부르는 프로세스 내에서 실행되는 세부 작업의 단위가 됩니다. 논리적인 스레드는 이론적으로는
메모리가 허용하는 범위 내에서 얼마든지 만들 수 있지만 물리적인 스레드의 가용 범위 내에서 실행될 수 있습니다.

병렬성 : 물리적인 스레드와 관련
병렬성은 물리적인 스레드가 실제로 동시에 실행되기 때문에 여러 작업을 동시에 처리함을 의미한다.

동시성 : 논리적인 스레드와 관련
동시에 실행되는 것처럼 보이는 것을 의미한다. 논리적인 스레드가 물리적인 스레드를 아주 빠른 속도로 번걸아가며 사용하면서 마치 동시에 실행되는
것처럼 보이는 동시성을 가지게 된다.

# Scheduler란

Reactor에서 Scheduler는 운영체제에서 사용되는 Scheduler 의미와 비슷하다고 볼 수 있습니다.

운영체제의 스케줄러는 프로세스의 라이프 사이클을 관리한다.
이와 유사하게 Reactor의 Scheduler는 비동기 프로그래밍을 위해 사용되는 스레드를 관리해주는 역할을 합니다.
다시 말해, Scheduler를 사용하여 어떤 스레드에서 무엇을 처리할지 제어합니다. 이러한 일이 굉장히 복잡하고 고려하다보면 코드도 복잡해진다.
Reactor에서는 이러한 문제를 최소화할 수 있도록 도와준다.


# scheduler 정리

* subscribeOn
구독이 발생한 직후에, 실행될 스레드를 지정하는 Operator
* publishOn
Downstream으로 Signal을 전송할 때 실행되는 스레드를 제어하는 역할을 하는 Operator
* parallel
라운드 로빈 방식으로 CPU 코어 개수만큼의 스레드를 병렬로 실행